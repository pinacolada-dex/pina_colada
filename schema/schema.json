{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Schema",
  "type": "object",
  "required": [
    "execute",
    "instantiate",
    "migrate",
    "query"
  ],
  "properties": {
    "execute": {
      "$ref": "#/definitions/ExecuteMsg"
    },
    "instantiate": {
      "$ref": "#/definitions/InstantiateMsg"
    },
    "migrate": {
      "$ref": "#/definitions/MigrateMsg"
    },
    "query": {
      "$ref": "#/definitions/QueryMsg"
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "description": "This enum describes a Terra asset (native or CW20).",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "A token amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Information about an asset stored in a [`AssetInfo`] struct",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "ExecuteMsg": {
      "description": "impl SwapOperation { pub fn get_target_asset_info(&self) -> AssetInfo { match self { SwapOperation::NativeSwap { ask_denom, .. } => AssetInfo::NativeToken { denom: ask_denom.clone(), }, SwapOperation::ColadaSwap { ask_asset_info, .. } => ask_asset_info.clone(), } } } * This structure describes the execute messages available in the contract.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "receive"
          ],
          "properties": {
            "receive": {
              "$ref": "#/definitions/Cw20ReceiveMsg"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "ExecuteSwapOperations processes multiple swaps while mentioning the minimum amount of tokens to receive for the last swap operation",
          "type": "object",
          "required": [
            "execute_swap_operations"
          ],
          "properties": {
            "execute_swap_operations": {
              "type": "object",
              "required": [
                "operations"
              ],
              "properties": {
                "max_spread": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "minimum_receive": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "operations": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SwapOperation"
                  }
                },
                "to": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Internal use ExecuteSwapOperation executes a single swap operation",
          "type": "object",
          "required": [
            "provide_liquidity"
          ],
          "properties": {
            "provide_liquidity": {
              "type": "object",
              "required": [
                "assets"
              ],
              "properties": {
                "assets": {
                  "description": "The assets available in the pool",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Asset"
                  }
                },
                "auto_stake": {
                  "description": "Determines whether the LP tokens minted for the user is auto_staked in the Generator contract",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "receiver": {
                  "description": "The receiver of LP tokens",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "slippage_tolerance": {
                  "description": "The slippage tolerance that allows liquidity provision only if the price in the pool doesn't move too much",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "create_pair"
          ],
          "properties": {
            "create_pair": {
              "type": "object",
              "required": [
                "asset_infos",
                "token_code_id"
              ],
              "properties": {
                "asset_infos": {
                  "description": "Information about assets in the pool",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AssetInfo"
                  }
                },
                "init_params": {
                  "description": "Optional binary serialised parameters for custom pool types",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "token_code_id": {
                  "description": "The token contract code ID used for the tokens in the pool",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "InstantiateMsg": {
      "description": "This structure holds the parameters used for creating a contract.",
      "type": "object",
      "required": [
        "astroport_factory"
      ],
      "properties": {
        "astroport_factory": {
          "description": "The astroport factory contract address",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "MigrateMsg": {
      "description": "This structure describes a migration message. We currently take no arguments for migrations.",
      "type": "object",
      "additionalProperties": false
    },
    "QueryMsg": {
      "oneOf": [
        {
          "description": "Config returns configuration parameters for the contract using a custom [`ConfigResponse`] structure SimulateSwapOperations simulates multi-hop swap operations",
          "type": "object",
          "required": [
            "simulate_swap_operations"
          ],
          "properties": {
            "simulate_swap_operations": {
              "type": "object",
              "required": [
                "offer_amount",
                "operations"
              ],
              "properties": {
                "offer_amount": {
                  "description": "The amount of tokens to swap",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ]
                },
                "operations": {
                  "description": "The swap operations to perform, each swap involving a specific pool",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SwapOperation"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "config"
          ],
          "properties": {
            "config": {
              "type": "object",
              "required": [
                "pool_key"
              ],
              "properties": {
                "pool_key": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "pool"
          ],
          "properties": {
            "pool": {
              "type": "object",
              "required": [
                "pool_key"
              ],
              "properties": {
                "pool_key": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "pair"
          ],
          "properties": {
            "pair": {
              "type": "object",
              "required": [
                "pool_key"
              ],
              "properties": {
                "pool_key": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "compute_d"
          ],
          "properties": {
            "compute_d": {
              "type": "object",
              "required": [
                "pool_key"
              ],
              "properties": {
                "pool_key": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Query LP token virtual price",
          "type": "object",
          "required": [
            "lp_price"
          ],
          "properties": {
            "lp_price": {
              "type": "object",
              "required": [
                "pool_key"
              ],
              "properties": {
                "pool_key": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SwapOperation": {
      "description": "This structure holds the parameters used for creating a contract.",
      "type": "object",
      "required": [
        "ask_asset_info",
        "offer_asset_info"
      ],
      "properties": {
        "ask_asset_info": {
          "description": "Information about the asset we swap to",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        },
        "offer_asset_info": {
          "description": "ASTRO swap Information about the asset being swapped",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
